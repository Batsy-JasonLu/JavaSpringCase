<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!--mvc:annotation-driven注册了 RequestMappingHandlerMapping, a RequestMappingHandlerAdapter,and an ExceptionHandlerExceptionResolver。
	它能启动@RequestMapping,@ExceptionHandler, and others注解 -->
    <mvc:annotation-driven />
	<!-- 把无法mapping到Controller的path交给default servlet handler处理 -->
    <mvc:default-servlet-handler />
    <!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理而由前面的default-servlet-handler处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd -->
    <mvc:resources mapping="/img/**" location="/img/" />
    <mvc:resources mapping="/js/**" location="/js/" />
    <mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/html/**" location="/html/" />

	<!-- 1、对web包中的Controller类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <!-- 也就是说这里相当于实例化了Controller类并且给它注入了Service的实例？它没有扫描Service的包诶。。 -->
    <!-- 因为applicationContext.xml先于本文件加载，所以那边先进行扫描，其实是注入了的，byName通过@Service(...)里面的值进行匹配 -->
    <context:component-scan base-package="com.lym.controller" />

    <!-- 下面这两个处理器映射默认跟<mvc:annotation-driven />功能几乎是一样的，都能够启用SpringMVC的注解功能，只是如果要添加一些其它功能的时候就进行配置了 -->
    <!-- 2、启动Spring MVC的注解功能，完成请求和注解POJO的映射，添加拦截器，类级别的处理器映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <!-- 
        <property name="interceptors">
                               用于检查session是否存在。在我的项目中MyHandlerInterceptor不存在，所以注释掉，这里只作为展示
            <list>
                <bean class="com.lince.util.MyHandlerInterceptor" />
            </list>
        </property>
        -->
    </bean>

    <!-- 2.5、启动Spring MVC的注解功能，完成请求和注解POJO的映射，对有RequestMapping注解的控制器进行HTTP路径、HTTP方法和请求参数解析，这里配置了一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="cacheSeconds" value="0" />
        <!-- cacheSeconds =0时，则将设置如下响应头数据： 
        Pragma：no-cache     HTTP 1.0的不缓存响应头
        Expires：1L          useExpiresHeader=true时，HTTP 1.0 
        Cache-Control ：no-cache  useCacheControlHeader=true时，HTTP 1.1 
        Cache-Control ：no-store  useCacheControlNoStore=true时，该设置是防止Firefox缓存 -->
        
        <!-- 在我的项目里中，MyWebBinding也不存在，所以注释掉，这里仍然只做展示 -->
        <!-- <property name="webBindingInitializer">
            <bean class="com.lince.util.MyWebBinding" />
        </property> -->
        <!-- 配置一下对json数据的转换
        <property name="messageConverters">
            <list>
                                          对@ResponseBody注释的方法生效
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
                <bean class="org.springframework.http.converter.StringHttpMessageConverter" />
            </list>
        </property>
        -->
    </bean>
    
    <!-- 视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<!-- 配置从项目根目录到指定目录一端路径 ,建议指定浅一点的目录-->
    	<property name="prefix" value="/WEB-INF/jsp"></property>
    	<!-- 文件的后缀名 -->
   		<property name="suffix" value=".jsp"></property>
    </bean>
    
    <!-- 一般来说配置到这里，就完成了。下面的这些配置是较少用到，先写在这里并注释掉，如果以后用到在了解  -->
    
    <!-- 配置对JSP文件的视图解析器 -->
    <!--
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/view/" />
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <prop key="default_encoding">UTF-8</prop>
                <prop key="number_format">0.##########</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="classic_compatible">true</prop>
                <prop key="template_exception_handler">ignore</prop>
            </props>
        </property>
    </bean>
    -->
    
    <!-- 配置对HTML文件的视图解析器 -->
    <!-- 首先要设置freeMarker的配置文件路径 -->
    <!--
    <bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean" />

    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="viewClass">
            <value>org.springframework.web.servlet.view.freemarker.FreeMarkerView</value>
        </property>
        <property name="cache">
            <value>true</value>
        </property>
        <property name="allowSessionOverride" value="true" />
        <property name="suffix">
            <value>.html</value>
        </property>
        <property name="viewNames" value="*.html,*.jsp" />
        <property name="contentType">
            <value>text/html; charset=UTF-8</value>
        </property>
        <property name="order" value="0" />
    </bean>
    -->
    
</beans>